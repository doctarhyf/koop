/*   return loading ? (
    <View style={[styles.paddingLarge]}>
      <ActivityIndicator animating={loading} color={KOOP_BLUE} />
    </View>
  ) : (
    <View>
      <View style={[styles.flexRow, styles.justifyBetween, styles.bgWhite]}>
        {[
          {
            label: "INBOX",
            type: MESSAGE_TYPE.INBOX,
          },
          {
            label: "OUTBOX",
            type: MESSAGE_TYPE.OUTBOX,
          },
        ].map((it, i) => (
          <TouchableOpacity key={i} onPress={(e) => settabtype(it.type)}>
            <View
              style={[
                styles.flexRow,
                styles.justifyCenter,
                styles.alignCenter,
                styles.paddingSmall,
                tabtype === it.type ? st.on : st.off,
              ]}
            >
              {i === 0 && (
                <MaterialCommunityIcons
                  name="email-receive"
                  size={24}
                  color={tabtype === it.type ? KOOP_BLUE : "#000"}
                />
              )}
              <Text
                style={[
                  styles.paddingSmall,
                  { color: tabtype === it.type ? KOOP_BLUE : "#000" },
                ]}
              >
                {it.label}
              </Text>
              {i === 1 && (
                <MaterialIcons
                  name="outbox"
                  size={24}
                  color={tabtype === it.type ? KOOP_BLUE : "#000"}
                />
              )}
            </View>
          </TouchableOpacity>
        ))}
      </View>

      {!messages && (
        <Text style={[styles.textCenter, styles.paddingMid]}>{nomsg}</Text>
      )}

      {messages && (
        <View>
          {tabtype === MESSAGE_TYPE.INBOX ? (
            inbox.length === 0 ? (
              <Text style={[st.nomsg]}>No inbox messages</Text>
            ) : (
              <FlatList
                data={inbox}
                keyExtractor={(item) => item.id.toString()}
                renderItem={({ item }) => (
                  <MessageItem
                    handleMessagePress={(e) => handleMessagePress(item)}
                    userName={`From: ${item.from_user.display_name}`}
                    userProfile={{ uri: item.from_user.profile }}
                    messageContent={item.message}
                    messageDate={item.created_at}
                  />
                )}
              />
            )
          ) : null}

          {
            tabtype === MESSAGE_TYPE.OUTBOX ? (
              outbox.length === 0 ? (
                <Text style={[st.nomsg]}>No outbox messages</Text>
              ) : (
                //outbox.map((msg, i) => (

                <FlatList
                  data={outbox}
                  keyExtractor={(item) => item.id.toString()}
                  renderItem={({ item }) => (
                    <MessageItem
                      handleMessagePress={(e) => handleMessagePress(item)}
                      userName={`to: ${item.to_user.display_name}`}
                      userProfile={{ uri: item.to_user.profile }}
                      messageContent={item.message}
                      messageDate={item.created_at}
                    />
                  )}
                />
              )
            ) : null

            //))
          }
        </View>
      )}
    </View>
  );
} */
